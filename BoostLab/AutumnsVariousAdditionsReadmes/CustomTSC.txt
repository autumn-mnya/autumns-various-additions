The "Autumns Various Additions" dll adds various new TSC commands into the game. They are explained better here!

# TSC Commands #

- <AMC - ArMs Clear
Removes all of the weapons in the players inventory.
Arguments: 0 [<AMC]

- <ITC - ITem Clear
Removes all of the items in the players inventory.
Arguments: 0 [<ITC]

- <BFS - Booster Fuel Set
Sets the players booster fuel of type W to value X.
Arguments: 2 [<BFSwwww:xxxx] [type:fuel]

###############################
#       Types for <BFS        #
# 0 - Booster 0.8             #
# 1 - Booster 2.0             #
# 2 - Booster 2.0 (Duplicate) #
# 8 - Booster 0.8 (Duplicate) #
###############################

- <BKE - BacKGround Enable
Enable <BKG layer W. Layer 0 is the first <BKG layer. -- Doesn't do anything if <BKG wasn't used!
Arguments: 1 [<BKEwwww] [layer]

- <BKD - BacKGround Disable
Disable <BKG layer W. Layer 0 is the first <BKG layer. -- Doesn't do anything if <BKG wasn't used!
Arguments: 1 [<BKDwwww] [layer]

- <BKG - BacKGround
Load Background txt file from data/bkg. -- End the text string with a $ so the game knows to stop reading the text.
Arguments: 1 [<BKGstring$] [background$]
Example: <BKGbkMoon$
( The above will load bkMoon.txt )

# BKG Readme #

<BKG is a massive hack that can change how you create backgrounds in Cave Story.

It's incredibly complex though, as it has many moving parts. I'll try to explain most of them here!

<BKG loads a txt file from the "data/bkg" folder. This txt file contains the name of the background you want to display, and all of the layers you want your background to have.
You can see the "CustomTSC_BKG_Format" and "CustomTSC_BKG_Example" txt files for both an example of a <BKG txt file, and also the format of understanding which values do what.

Read "CustomTSC_BKG_Explanation.txt" for more info on <BKG itself.

- <BKP - BacKGround Parameter
Set <BKG parameter X for layer W to value Y. Layer 0 is the first <BKG layer.
Arguments: 3 [<BKPwwww:xxxx:yyyy] [layer:parameter:value]
Example <BKP0000:0008:0008

#############################################################################
#                            Parameters for <BKP                            #
# 0 - Bitmap X Offset
# 1 - Bitmap Y Offset
# 2 - Bitmap Width
# 3 - Bitmap Height
# 4 - Repeat X
# 5 - Repeat Y
# 6 - Repeat Gap X
# 7 - Repeat Gap Y
# 8 - Type
# 9 - Horizontal Scroll Speed (divided by 10 because decimals, 0001 = 0.1!)
# 10 - Vertical Scroll Speed (divided by 10 because decimals, 0001 = 0.1!)
# 11 - Sprite Number
# 12 - Animation Speed
# 13 - Map X Offset (amount of tiles, not pixels)
# 14 - Map Y Offset (amount of tiles, not pixels)
#                                                                           #
#############################################################################

- <BKR - BacKground Reset
Disables <BKG. This will keep the <BKG background file though. <BKG will auto reset on <TRA as well!!
Arguments: 0 [<BKR]

- <BLO - BLOw up
Displays a boss explosion flash effect at entity with the assigned event number. There can only be 1 on screen!!
Arguments: 1 [<BLOwwww] [entity_event]

- <BUY - BUY jump
[This TSC command is only useful when the money code is enabled in settings.ini.]
This command will jump to event X if the player doesn't have W money. Otherwise, it will continue the current event and remove W money.
Arguments: 2 [<BUYwwww:xxxx] [money:event]

- <BY2 - BuY jump 2
[This TSC command is only useful when the money code is enabled in settings.ini.]
This command will jump to event X if the player has W money, and will remove X money as well. Otherwise, it will continue the current event.
Arguments: 2 [BY2wwww:xxxx] [money:event]

- <SEL - SELl (Add money)
[This TSC command is only useful when the money code is enabled in settings.ini.]
This command will add money W to the players money amount.
Arguments: 1 [<SELwwww] [money]

- <SL= - SeLl = (Set money)
[This TSC command is only useful when the money code is enabled in settings.ini.]
This command will set the players money amount to W.
Arguments: 1 [<SL=wwww] [money]

- <CO+ - COllectables + (Add Collectable)
Add collectables amount X to collectable variable W. There are 5 collectable variables. 0 is the first one, and 4 is the last one. Any higher and it'll just effect 0.
Arguments: 2 [<CO+wwww:xxxx] [variable:value]

- <CO- - COllectables - (Subtract Collectable)
Subtract collectables amount X from collectable variable W. There are 5 collectable variables. 0 is the first one, and 4 is the last one. Any higher and it'll just effect 0.
Arguments: 2 [<CO-wwww:xxxx] [variable:value]

- <COD - COllectable Disable (Disable Collectable Displaying)
Disables collectable variable W from displaying on screen. There are 5 collectable variables. 0 is the first one, and 4 is the last one. Any higher and it'll just effect 0.
Arguments: 1 [<CODwwww] [variable]

- <COE - COllectable Enable (Enable Collectable Displaying)
Enables collectable variable W from displaying on screen. There are 5 collectable variables. 0 is the first one, and 4 is the last one. Any higher and it'll just effect 0.
Arguments: 1 [<COEwwww] [variable]

- <COJ - COllectable Jump (Jump to event when player has collectables)
Jump to event Y if the player has X amount of collectables or more in variable W. There are 5 collectable variables. 0 is the first one, and 4 is the last one. Any higher and it'll just effect 0.
Arguments: 3 [<COJwwww:xxxx:yyyy] [variable:value:event]

- <CBK - Change BacKground (Vanilla)
Change the current stage background (NOT <BKG) to name A with type B. Both are string inputs, but the 2nd must be a valid background number.
Arguments: 2 [<CBKstring$string2$] [bk_name$bk_id$]
Example: <CBKbkMoon$6$
( The above will load "bkMoon" with background type "6" )

- <CSF - Change Surface File
Change surface ID (string) to load image name (string), meaning you can load whatever image you want in place of another. Use the list below to see which ones you can edit.
Arguments: 2 [<CSFstring$string2$] [id_string$filename_string$]
Example: <CSF16$MyChar2$
( The above will replace Surface ID 16 (MyChar) with image "MyChar2" )

# Surface List #
0 - Title
6 - Fade
8 - ItemImage
11 - Arms
12 - ArmsImage
14 - StageImage
16 - MyChar
17 - Bullet
19 - Caret
20 - Npc\NpcSym
23 - Npc\NpcRegu
24 - AutumnUI
25 - Npc\NpcAutumnObj
26 - TextBox
27 - Face
38 - Autumn
39 - Npc\NpcAutumnChar
(anything that isnt in this list cannot be changed)
(these will be saved to the save file)

- <CTS - Change TileSet
Load new tileset instead of the current one. Do not include "Prt" in your filename for the command!
Arguments: 1 [<CTSstring$] [tileset$]
Example: <CTSOside$
( The above will load PrtOside with pxa file Oside.pxa )

- <FM2 - Focus on Me 2

This TSC command allows you to focus the camera on the player with a custom offset!
The 2nd argument is a custom "mode" field. It is explained below.
Arguments: 4 [<FM2wwww:zzzz:xxxx:yyyy] [wait:mode:x_offset:y_offset]

########################################
#            Modes for <FM2            #
# 0 - X/Y offset are positive values   #
# 1 - X offset is a negative value     #
# 2 - Y offset is a negative value     #
# 3 - Both offsets are negative values #
########################################

- <FN2 - Focus on Npc 2
Same as <FON, except the player can still effect the camera depending on where they're facing.
Arguments: 2 [<FN2wwww:zzzz] [npc:wait]

- <FNJ - Flag Not Jump
Same as <FLJ, except it jumps to an event if the flag is NOT set.
Arguments: 2 [<FNJwwww:zzzz] [flag:event]

- <FOC - Focus On Coordinates
Focus the Camera at an X:Y position on the map.
Arguments: 3 [<FOCwwww:xxxx:yyyy] [wait:x:y]

- <LDR - Lock DiRection
Only when <FM2 has been used -- This can lock the players direction they're facing.
Arguments: 2 [<LDRwwww:zzzz] [mode:direction]

######################################
#          Modes for <LDR            #
# 0 - Unlock the Camera              #
# 1 - Lock the Camera in direction Y #
######################################
#        Directions for <LDR         #
# 0 - Lock the Camera Leftwards      #
# 1 - Lock the Camera Upwards        #
# 2 - Lock the Camera Rightwards     #
# 3 - Lock the Camera Downwards      #
# 4 - Player Can't Impact Direction  #
######################################

- <IMF - IMage Folder
Set a subfolder for <IMG to load from. Default folder is "data/Image" -- End the text string with a $ so the game knows to stop reading the text.
[ IMPORTANT: Using "<IMF$" will disable loading from a subfolder ! ]
[ IMPORTANT: Must be less than or equal to 48 characters in length! ]
Arguments: 1 [<IMFstring$] [directory$]
Example: <IMFautumnhazel$

- <IMG - IMaGe
Load a 320x340 image onto the whole screen. Default folder is "data/Image" -- End the text string with a $ so the game knows to stop reading the text.
[ IMPORTANT: Always have a 0.bmp available as the "0" <IMG is shown on screen at all times! ]
[ IMPORTANT: Must be less than or equal to 50 characters in length! ]
Arguments: 1 [<IMGstring$] [image$]
Example: <IMGglyph$
( You can set a flag to make the image appear *above* the textbox instead of behind it. The default is 6503, you can change this in the dll's settings.ini )

- <LSC - Load SCript
Load TSC Script and run event 0 afterwards. -- End the text string with a $ so the game knows to stop reading the text.
Arguments: 1 [<LSCstring$] [script$]
Example: <LSCPens1$
( The above will load Pens1.tsc )

- <MIM - MIMiga mask
Move the spritesheet for the player down by W spritesets. Default is 32 pixels as quote is 16x16 with 2 layers of sprites. Note: This may not be compatible with player resize hacks. Requires "Enable <MIM Command" to be set to true for the dll version.
Arguments: 1 [<MIMwwww] [spriteset]

- <ML- - Max Life -
Subtract the players max health by W instead of increasing it.
Arguments: 1 [<ML-wwww] [life]

- <MS4 - MeSsage 4
Open an invisible message box at the bottom of screen.
Arguments: 0 [<MS4]

- <PAT - PATch load
Load custom hex patch txt file from data/patches. Requires "Enable Custom Hex Patch Loader" to be set to true.
Arguments: 1 [<PATstring$] [patch$]
Example: <PATexample$
( The above will load example.txt ! It's just like a normal boosters lab hex patch -- you can have multiple in the same txt )
( You can also apply multiple, but you can't unapply multiple. )

- <RSP - ReSPawn player
Respawn the player, similar to loading a save file. This is automatically set on using <TRA, <TRM, TRX, or loading a save file.
This will save the players current flags from <FL+, current collectables if the collectables exist, among other things.
This basically mostly works the same as <LDP, but doesnt actually save the game. Useful for harder mods or mods that are more platforming focused.
Arguments: 0 [<RSP]

- <SRP - Set ResPawn point
Set the players respawn point at coordinates X:Y.
Arguments: 2 [<SRPxxxx:yyyy] [x:y]

- <TA2 - TrAnsport 2
This TSC command is the same as <TRA, except it will not set a respawn point.
Arguments: 4 [<TRMwwww:zzzz:xxxx:yyyy] [map:event:x:y]

- <UPT - UnPaTch
Unloads and unpatches all hex patches applies via <PAT.
Arguments: 0 [<UPT]

- <IPH - Initialize PHysics
Reset the physics for the player back to the ones set in settings.ini. Physics are auto-reset on new game.
Arguments: 0 [<IPH]

- <PHY - PHYsics
Change physics of type W to value X. The chart for the different physics values you can change is below.
Arguments: 2 [<PHYwwww:xxxx] [variable:value]

- <PS- - Portal Slot - (Remove)
Remove teleporter slot W.
Arguments: 1 [<PS-wwww] [slot]

- <PSC - Portal Slot Clear
Remove all teleporter slots that have been added.
Arguments: 0 [<PSC]

##################################################
#                 <PHY Variables                 #
# 0 - Max Walking Speed
# 1 - Max Top Movement Speed
# 2 - Gravity
# 3 - Rising Gravity
# 4 - Walking Acceleration
# 5 - Air Control
# 6 - Friction
# 7 - Jump Momentum
# 8 - Underwater Max Walking Speed
# 9 - Underwater Max Top Movement Speed
# 10 - Underwater Gravity
# 11 - Underwater Rising Gravity
# 12 - Underwater Walking Acceleration
# 13 - Underwater Air Control
# 14 - Underwater Friction
# 15 - Underwater Jump Momentum
# 16 - Walljumps Horizontal Speed // This and everything after is custom DLL physics
# 17 - Walljumps Jump Momentum
# 18 - Wallsliding Speed
# 19 - Underwater Walljumps Horizontal Speed
# 20 - Underwater Walljumps Jump Momentum
# 21 - Extra Jump Momentum
# 22 - Underwater Extra Jump Momentum
# 23 - Max Running Speed // Run Button
# 24 - Bouncy Block Speed // Tile Collision      #
##################################################

- <RNJ - Random Number Jump
Jump to a random event between W and Z.
Arguments: 2 [<RNJwwww:zzzz] [event_min:event_max]

- <SNJ - Skipflag Not Jump
Same as <SKJ, except it jumps to an event if the skipflag is NOT set.
Arguments: 2 [<SNJwwww:zzzz] [skipflag:event]

- <SWN - Set Window Name
Set the Window Name to a text string -- End the text string with a $ so the game knows to stop reading the text.
Arguments: 1 [<SWNstring$] [window_name$]
Example: <SWNCave Story ~ Doukutsu Monogatari$

- <TRM - TRansport Momentum
This TSC command is the same as <TRA, except you maintain your momentum when used. It was used in Autumn's mod "Bliss".
Arguments: 4 [<TRMwwww:zzzz:xxxx:yyyy] [map:event:x:y]
Note: <TM2 also exists, and will not set a respawn point as defined in the <SRP/<RSP part of this text file.

- <TRX - TRansport keep X:y
This TSC command is the same as <TRA except is preserves the players X:Y position. You need to be closer to the center of the hitbox of whatever you're interacting with to get it to properly work, as this is somewhat buggy.
Arguments: 2 [<TRMwwww:zzzz] [map:event]
Note: <TX2 also exists, and will not set a respawn point as defined in the <SRP/<RSP part of this text file.

#########################################################
# Check CustomTSC_VAR.txt before these next commands !! #
#              There are 300 variables total!           #


- <VAR - VARiable set
Set Variable W to value X. 
Arguments: 2 [<VARwwww:xxxx] [variable:value]

- <VA+ - VAriable + (Add)
Add value X to variable W.
Arguments: 2 [<VA+wwww:xxxx] [variable:value]

- <VA- - VAriable - (Subtract)
Subtract value X from variable W.
Arguments: 2 [<VA-wwww:xxxx] [variable:value]

- <VA* - VAriable * (Multiply)
Multiply variable W by value X.
Arguments: 2 [<VA*wwww:xxxx] [variable:value]

- <VA/ - VAriable / (Divide)
Divide variable W by value X.
Arguments: 2 [<VA/wwww:xxxx] [variable:value]

- <VAJ - VAriable Jump
[ Note: The values for this command arent variables, but you can still use variables if you start off the values with a "V" as stated in CustomTSC_Var.txt)
Compare value W with value X, using compare method Y. If the condition is true, jump to event Z.
Arguments: 4 [<VAJwwww:xxxx:yyyy:zzzz] [valueA:valueB:condition:event]

# Compare Methods: #

0 - If W is equal to X, the condition is true. ( W == X )
1 - If W is not equal to X, the condition is true. ( W != X )
2 - If W is greater than X, the condition is true. ( W > X )
3 - If W is less than X, the condition is true. ( W < X )
4 - If W is greater than or equal to X, the condition is true. ( W >= X )
5 - If W is less than or equal to X, the condition is true. ( W <= X )

- <VAZ - VAriable Zero
Set X amount of variables to 0, starting at variable W.
Arguments: 2 [<VAZwwww:zzzz] [variable_start:amount]

- <VND - Variable raNDom
Generates a random number between W and X. Sets variable Y to the result number of that.
Arguments: 3 [<VNDwwww:xxxx:yyyy] [number_min:number_max:variable]

- <VIJ - Variable Increment Jump
Increments variable W by 1. If W is greater than or equal to X, set variable W to 0 and jump to event Y.
Arguments: 3 [<VIJwwww:xxxx:yyyy] [variable:value:event]

#########################################################

<VAR	2	##--	VARiable set	Set Variable W to X. (Check TSC command txt).	0	0	1	4	4	4	4
<VA+	2	##--	VAriable +	Add value X to variable W. (Check TSC command txt).	0	0	1	4	4	4	4
<VA-	2	##--	VAriable -	Subtract value X from variable W. (Check TSC command txt).	0	0	1	4	4	4	4
<VA*	2	##--	VAriable *	Multiply variable W by value X. (Check TSC command txt).	0	0	1	4	4	4	4
<VA/	2	##--	VAriable /	Divide variable W by value X. (Check TSC command txt).	0	0	1	4	4	4	4
<VAJ	4	###e	VAriable Jump	Compare number W to number X (Not variables!!) using compare method Y. Jump to event Z if true (Check TSC command txt).	0	0	1	4	4	4	4
<VAZ	2	##--	VAriable Zero	Set X amount of variables to 0, starting at variable W. (Check TSC command txt).	0	0	1	4	4	4	4
<VND	3	##e-	Variable raNDom	Generates a random number between W and X. Sets variable Y to the result number (Check TSC command txt).	0	0	1	4	4	4	4
<VIJ	3	##e-	Variable Increment Jump	Increments variable W by 1. If W is greater than or equal to X, set variable W to 0 and jump to event Y (Check TSC command txt).	0	0	1	4	4	4	4

- <WCL - Write CaLl
Write a function call at address A to address B -- 2 text strings back-to-back, both ending with a $. The function address is a *hex value*.
Arguments: 2 [<WCLstring$cstring2$] [address_a_string$address_b_string$]
Example: <WCL423DE9$401000$
( The above will replace <CSS with the "ClearArmsData" function )